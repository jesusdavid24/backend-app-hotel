// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserWithouPassword {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  identificationNumber String
  firstName            String
  lastName             String
  email                String             @unique
  password             String?
  phone                String
  isActive             Boolean            @default(false)
  isDeleted            Boolean            @default(false)
  requiresAuth         Boolean            @default(false)
  recoveryToken        String?
  booking              Booking[]
  role                 UserRole
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  IdentificationType   IdentificationType @relation(fields: [identificationTypeId], references: [id])
  identificationTypeId String             @db.ObjectId
}

enum UserRole {
  ADMIN
  RECEPTIONIST
  CUSTOMER
  GUEST
}

model IdentificationType {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  isDeleted Boolean              @default(false)
  user      UserWithouPassword[]
}

model Booking {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  checkInDate          DateTime
  checkOutDate         DateTime
  codeBooking          String?
  source               String?
  createBy             String?
  Room                 Room               @relation(fields: [roomId], references: [id])
  roomId               String             @db.ObjectId
  UserWithouPassword   UserWithouPassword @relation(fields: [userWithouPasswordId], references: [id])
  userWithouPasswordId String             @db.ObjectId
  status               Status
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

enum Status {
  PENDING
  CONFIRMED
  CANCELLED
  EXPIRED
  FINISHED
}

model Room {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  imagesUrl   String[]
  description String
  isDeleted   Boolean   @default(false)
  Booking     Booking[]
  Amenity     Amenity   @relation(fields: [amenityId], references: [id])
  amenityId   String[]  @db.ObjectId
  Rule        Rule      @relation(fields: [ruleId], references: [id])
  ruleId      String[]  @db.ObjectId
  RoomType    RoomType  @relation(fields: [roomTypeId], references: [id])
  roomTypeId  String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model RoomType {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  nonDiscountedValue Float
  discountedValue    Float
  isDeleted          Boolean @default(false)
  room               Room[]
}

model Amenity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  iconUrl   String
  isDeleted Boolean  @default(false)
  room      Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rule {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  isDeleted   Boolean  @default(false)
  room        Room[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
